#include "main.h"

/**
 * _putchar - Writes a character to stdout.
 * @c: The character to be written.
 *
 * Return: On success, the character written. On error, -1.
 */
int _putchar(char c) {
    return write(1, &c, 1);
}

/**
 * _islower - Checks if a character is a lowercase letter.
 * @c: The character to be checked.
 *
 * Return: 1 if @c is a lowercase letter, 0 otherwise.
 */
int _islower(int c) {
    return (c >= 'a' && c <= 'z');
}

/**
 * _isalpha - Checks if a character is an alphabetic character.
 * @c: The character to be checked.
 *
 * Return: 1 if @c is an alphabetic character, 0 otherwise.
 */
int _isalpha(int c) {
    return _islower(c) || _isupper(c);
}

/**
 * _abs - Computes the absolute value of an integer.
 * @n: The integer.
 *
 * Return: The absolute value of @n.
 */
int _abs(int n) {
    return (n < 0) ? -n : n;
}

/**
 * _isupper - Checks if a character is an uppercase letter.
 * @c: The character to be checked.
 *
 * Return: 1 if @c is an uppercase letter, 0 otherwise.
 */
int _isupper(int c) {
    return (c >= 'A' && c <= 'Z');
}

/**
 * _isdigit - Checks if a character is a digit (0 through 9).
 * @c: The character to be checked.
 *
 * Return: 1 if @c is a digit, 0 otherwise.
 */
int _isdigit(int c) {
    return (c >= '0' && c <= '9');
}

/**
 * _strlen - Computes the length of a string.
 * @s: The string.
 *
 * Return: The length of the string.
 */
int _strlen(char *s) {
    int length = 0;

    while (*s != '\0') {
        length++;
        s++;
    }

    return length;
}

/**
 * _puts - Writes a string to stdout.
 * @s: The string to be written.
 */
void _puts(char *s) {
    while (*s != '\0') {
        _putchar(*s);
        s++;
    }
}

/**
 * _strcpy - Copies a string to another string.
 * @dest: The destination string.
 * @src: The source string.
 *
 * Return: A pointer to the destination string.
 */
char *_strcpy(char *dest, char *src) {
    char *original_dest = dest;

    while ((*dest++ = *src++) != '\0')
        ;

    return original_dest;
}

/**
 * _atoi - Converts a string to an integer.
 * @s: The string to be converted.
 *
 * Return: The converted integer.
 */
int _atoi(char *s) {
    int result = 0;
    int sign = 1;

    while (*s == ' ' || (*s >= '\t' && *s <= '\r'))
        s++;

    if (*s == '-' || *s == '+') {
        sign = (*s == '-') ? -1 : 1;
        s++;
    }

    while (*s >= '0' && *s <= '9') {
        result = result * 10 + (*s - '0');
        s++;
    }

    return sign * result;
}

// Implement the rest of the functions similarly


